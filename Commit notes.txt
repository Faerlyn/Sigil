New:  

WindowFrame Widget

This widget is a draggable and resizable window that holds other widgets, it is currently used when the player wants to open the Spellbook window.

SigilMenuWidgetBase

Holds the minimum height and width of a widget, only used by the WindowFrame widget right now but this will change once I add new menus for the player to interact with.

Spellbook Widget

Press the tab key to open the widget, you can create new spells and edit existing ones using this window. You can add and remove spells from the bar at the bottom of the screen by either using the provided buttons or by dragging the spells on or off the bar. Core spells cannot be changed by the user, this is controlled by the CanEdit boolean inside the Data Asset.

Spellbook Component

This component is created automatically by the spellcasting component, its only use right now is storing spells created by the player.

SpellbookSlot Widget

This new widget is a copy of the SpellSelectionSlot widget but with the hotkey part of the design removed, the widget also stores a reference to the Spellbook widget that created it for the purpose of calling certain functions.

Spell Tooltip Widget

This widget displays the final stats of a spell, this widget is also used by the Spellbook widget to display the currently selected spell. The spell's mesh and material is displayed using a render target (BP_SpellMeshCapture) created when the construct event is called, and destroyed when the tooltip's deconstruct event is called. A boolean is exposed on spawn to determine which of the two render target materials the widget should use.

Saving the game

Press the X key to save the game, the following information is currently saved:
- Player name
- Player character's location
- Player controller rotation
- Custom spells created by the player

Prepared spells will also be saved in the future, I just need to get the component to grab spells from the spellbook directly rather than creating two different versions of the same spell.

Assets

Audio

Two new audio assets were added (SFX_explosion3 & SFX_Flame1)

SFX

NS_SpellBurst is a niagara system that receives two inputs of a static mesh. Mesh particles are spawned in an outward burst. The mesh and mesh location of these particles are controlled by the two mesh inputs. This SFX is used by the spell projectile blueprint when the actor collides with something.

Materials

I have created a new material and instances to used with anything spell related, an instance has been created for each element I plan to implement.

Enums

ESpellForm is used to control the mesh a spell might use, Dart and Orb are the only ones that work right now.
ESpellTarget determines whether a spell will act once it has been cast, it doesn't do anything right now but will in the future.

Structs
FSpellProperties contains the member variables of UDA_SpellInfo with the exception of the CanEdit boolean. I created it to make it easier to change the properties of a spell. 

Changes:

- New inputs
- Most of the item and spell meshes have received minor changes or improvements since the last commit
- EMagicElementType has five new values: None (Hidden), Dark, Light, Metal, and Nature

UDA_SpellInfo
- New multiplier variables added to calculate the final stats of a spell
- New functions to calculate the final MPCost, Damage, and Speed of a spell

CharacterAttributesComponent
- All attributes are now capable of regenerating, this can be controlled by changing the RegenPercent and CanRegen variables.